@create Master HSpace Console <MHS>
@link Master HSpace Console <MHS> = #434
@set Master HSpace Console <MHS> = LINK_OK
@set Master HSpace Console <MHS> = OPAQUE
@set Master HSpace Console <MHS> = WIZARD
@set Master HSpace Console <MHS> = SAFE
@set Master HSpace Console <MHS> = NO_COMMAND
&CMD_AFTERBURN Master HSpace Console <MHS>=$afterburn:&deadman [V(HSDB_OWNER)];@nav/afterburn 1
&CMD_ASSIGN_TO Master HSpace Console <MHS>=$assign * to *:&deadman [V(HSDB_OWNER)];@eng/assigncrew %0=%1
&CMD_AUTOLOAD Master HSpace Console <MHS>=$autoload on:&deadman [V(HSDB_OWNER)];@console/autoload 1
&CMD_AUTOROTATE Master HSpace Console <MHS>=$autorotate on:&deadman [V(HSDB_OWNER)];@console/autorotate 1
&CMD_BAYSTAT Master HSpace Console <MHS>=$baystat:th [if(hs_get_attr(%!,ispowered),pemit(%#,ansi(hb,.[repeat(-,68)].%r|)%b[ljust(Bay Status,30)][rjust(hs_get_attr(%!,name)\([hs_get_attr(%!,ident)]\),36)]%b[ansi(hb,|%r%b>[repeat(-,66)]<%r|)]%b[ljust(ansi(hg,\[)[ansi(hw,[Ansi(hw,#)]#)][ansi(hg,\]%b[ljust(Bay Name,35)]%b[ljust(Bay Doors,12)][Center(Code,10)])],66)]%b[ansi(hb,|%r)][iter(hs_get_attr(%!,landinglocs),ansi(hb,|)%b[ljust(%b[rjust(#@,2)]%b%b[ljust(name(##),36)]%b%b[ljust(switch(hs_get_attr(##,Active),1,Open,0,Closed),8)]%b[Center(switch(hs_get_attr(##,code),,None,ansi(hr,%b#$)),12)],66)]%b[ansi(hb,|%r)],,)][ansi(hb,`[repeat(-,68)]')]),pemit(%#,ansi(hr,-) [name(%!)] is currently powered down.))]
&CMD_BAYSTAT2 Master HSpace Console <MHS>=$baystat *:th [if(hs_get_attr(%!,ispowered),if(isdbref(setr(0,extract(hs_get_attr(%!,landinglocs),%0,1))),pemit(%#,ansi(hb,.[repeat(-,68)].%r|)%b[ljust(Bay Status: Bay \#%0,26)]%b%b[rjust(hs_get_attr(%!,name)\([hs_get_attr(%!,ident)]\),38)]%b[ansi(hb,|%r%b>[repeat(-,66)]<%r|)]%b[ljust(ansi(hg,ljust(Vessel Name,24)%b[ljust(Class Name,24)]%b[ljust(Active,7)]%b[ljust(Secure,7)]),66)]%b[ansi(hb,|%r)][iter(lcon(%q0),if(hasflag(##,HSPACE_OBJECT),ansi(hb,|)%b[ljust(ljust(hs_get_attr(##,name),24)%b[ljust(hs_get_attr(##,CLASSNAME),24)]%b%b%b[ljust(switch(hs_sys_attr(##/reactor,current output,1),>0,Yes,No),7)]%b[ljust(switch(hs_get_attr(##,BOARDING CODE),,No,Yes),6)],66)][ansi(hb,%b|%r)]),,)][ansi(hb,`[repeat(-,68)]')]),pemit(%#,ansi(hr,-) Invalid bay.)),pemit(%#,ansi(hr,-) [name(%!)] is currently powered down.))]
&CMD_BLINK Master HSpace Console <MHS>=$link *=*/*:@swi [u(fn_contact,%0)]={},@pemit %#=[ansi(hr,-)] No such contact on sensors.,{@swi [get([extract([u(fn_contact,%0)],2,1,:)]/deadman)]=YES,@pemit %#=[ansi(hr,-)] That ship is deadmanned and may not be boarded.,&deadman [V(HSDB_OWNER)];@nav/boardlink %0/%1=%2}
&CMD_BOARD_CODE Master HSpace Console <MHS>=$boarding code *:@pemit %#=[switch(%#,[get([v(hsdb_owner)]/ship_owner)],[setq(0,[hs_set_attr(%!/boarding code,%0)])][wipe(%!/old_boardcode)][Ansi(hg,-)] Boarding code changed to "%0",[ansi(hr,-)] Permission denied.)]
&CMD_BOARD_CODE_OFF Master HSpace Console <MHS>=$boarding code:@pemit %#=[switch(%#,[get([v(hsdb_owner)]/ship_owner)],[setq(0,[hs_set_attr(%!/boarding code,)])][Ansi(hg,-)] Boarding code deleted.,[ansi(hr,-)] Permission denied.)]
&CMD_CHEAD Master HSpace Console <MHS>=$chead * mark *:&deadman [V(HSDB_OWNER)];@console/head %0=%1
&CMD_CHOWN Master HSpace Console <MHS>=$chown *:th [switch([setq(0,[v(hsdb_owner)])][setq(1,[num(*%0)])][switch(%q1,#-1,pemit(%#,ansi(hr,-) Invalid target.),[switch(%#,[get(%q0/ship_owner)],[set(%q0,ship_owner:%q1)][pemit(%#,ansi(hg,-) Transfer of ownership complete.)])],pemit(%#,ansi(hr,-) Permission denied.))])]
&CMD_CLOAK Master HSpace Console <MHS>=$cloak:&DEADMAN [V(HSDB_OWNER)];@nav/cloak 1
&CMD_CLOSE_BAY Master HSpace Console <MHS>=$close bay *:th if(hs_get_attr(%!,ispowered),if(isdbref(setr(0,extract(hs_get_attr(%!,landinglocs),%0,1))),if(hs_get_attr(%q0,active),hs_set_attr(%q0/active,0)[pemit(%#,ansi(hg,-) Bay doors to bay %0 closed.)][remit(%q0,The bay doors slowly close.)],pemit(%#,ansi(hr,-) Bay doors already closed.)),pemit(%#,ansi(hr,-) Invalid bay.)),pemit(%#,ansi(hr,-) [name(%!)] is currently powered down.))
&CMD_CONFIGURE Master HSpace Console <MHS>=$configure *=*:@console/configure %0=%1
&CMD_CPOWER_OFF Master HSpace Console <MHS>=$cpower off:@console/power 0;&hsdb_console_power %!=0
&CMD_CPOWER_ON Master HSpace Console <MHS>=$cpower on:@console/power 1;&hsdb_console_power %!=1
&CMD_CREWREP Master HSpace Console <MHS>=$crewrep:@eng/crewrep
&CMD_CSTAT Master HSpace Console <MHS>=$cstat:@pemit %#=[switch([u(fn_has_comm)],0,[ansi(hr,-)] This vessel has no communications array.,[u(fn_cstat)])]
&CMD_DEADMAN Master HSpace Console <MHS>=$deadman:@PEmit %#=[Ansi(hg,-)] Ship will enter deadman mode in 2 minutes.;@Wait 120={&DEADMAN [V(HSDB_OWNER)]=YES;@PEmit %#=[Ansi(hg,-)] Ship now in deadman mode. Any use of the ship will deactivate this mode.}
&CMD_DECLOAK Master HSpace Console <MHS>=$decloak:&DEADMAN [V(HSDB_OWNER)];@nav/cloak 0
&CMD_DOCK Master HSpace Console <MHS>=$dock */*:Think [SetQ(0,[Extract(%1,2,1,=)])];@swi %q0={},{@nav/land %0/%1},{&deadman [V(HSDB_OWNER)];@nav/land %0/%1=%q0}
&CMD_ENDJUMP Master HSpace Console <MHS>=$abort:&deadman [V(HSDB_OWNER)];@nav/jump 0
&CMD_ETA Master HSpace Console <MHS>=$eta:Think
&CMD_FIRE Master HSpace Console <MHS>=$fire *:&deadman [V(HSDB_OWNER)];@switch %0=all,{@dolist [LNum(1,Words(hs_get_attr(%!,weapons)))]={@console/fire ##}},{@console/fire %0}
&CMD_GATE Master HSpace Console <MHS>=$gate *:&deadman [V(HSDB_OWNER)];@nav/gate %0
&CMD_GREP Master HSpace Console <MHS>=$grep:&deadman [V(HSDB_OWNER)];@console/grep
&CMD_HEAD Master HSpace Console <MHS>=$head * mark *:&deadman [V(HSDB_OWNER)];@nav/setheading %0=%1
&CMD_HEAD2 Master HSpace Console <MHS>=$sh *m*:&deadman [V(HSDB_OWNER)];@nav/setheading %0=%1
&CMD_HEAD3 Master HSpace Console <MHS>=$sh * *:&deadman [V(HSDB_OWNER)];@nav/setheading %0=%1
&CMD_HEAD_XY Master HSpace Console <MHS>=$xy *:&deadman [V(HSDB_OWNER)];@nav/setheading %0=[hs_get_attr(%!,dzheading)]
&CMD_HEAD_Z Master HSpace Console <MHS>=$z *:&deadman [V(HSDB_OWNER)];@nav/setheading [hs_get_attr(%!,dxyheading)]=%0
&CMD_HSTAT Master HSpace Console <MHS>=$hstat:@nav/hstat
&CMD_ICOM Master HSpace Console <MHS>=$icom *:th [u(fn_notify_consoles,[v(hsdb_owner)],[ansi(c,\[ICOM - [name(%!)]\])] %0)]
&CMD_INTER Master HSpace Console <MHS>=$inter *:@switch [setr(0,u(fn_contact,%0))]=,{@pemit %#=[ansi(hr,-)] No such contact on sensors.},{&DEADMAN [V(HSDB_OWNER)];&HSDB_LAST_INTER %!=%0;@nav/setheading [xyang(hs_get_attr(%!,x),hs_get_attr(%!,y),hs_get_attr(setr(1,extract(%q0,2,1,:)),x),hs_get_attr(%q1,y))]=[zang(hs_get_attr(%!,x),hs_get_attr(%!,y),hs_get_attr(%!,z),hs_get_attr(setr(1,extract(%q0,2,1,:)),x),hs_get_attr(%q1,y),hs_get_attr(%q1,z))]}
&CMD_INTER_AUTO Master HSpace Console <MHS>=$inter:@switch [setr(0,u(fn_contact,v(HSDB_LAST_INTER)))]=,{@pemit %#=[ansi(hr,-)] No such contact on sensors.},{&DEADMAN [V(HSDB_OWNER)];@nav/setheading [xyang(hs_get_attr(%!,x),hs_get_attr(%!,y),hs_get_attr(setr(1,extract(%q0,2,1,:)),x),hs_get_attr(%q1,y))]=[zang(hs_get_attr(%!,x),hs_get_attr(%!,y),hs_get_attr(%!,z),hs_get_attr(setr(1,extract(%q0,2,1,:)),x),hs_get_attr(%q1,y),hs_get_attr(%q1,z))]}
&CMD_JUMP Master HSpace Console <MHS>=$jump:&DEADMAN [V(HSDB_OWNER)];@nav/jump 1
&CMD_JUMP_POINT Master HSpace Console <MHS>=$jump *:th [setq(0,[u(fn_contact,%0)])];@switch %q0=,{@pemit %#=[ansi(hr,-)] No such contact on sensors.},{th [setq(1,[extract(%q0,2,1,:)])];@switch [get(%q1/jump_buoy)]=,{@pemit %#=[ansi(hr,-)] That contact is not a jump buoy.},{th [setq(2,[extract(%q0,9,1,:)])];@switch [gt(%q2,2)]=1,{@pemit %#=[ansi(hr,-)] You must be within 2 [HS_Unit_Name()] of a jump buoy to use it.},{th [Wipe(V(HSDB_OWNER)/DEADMAN)][hs_spacemsg(2,The [hs_get_attr(%!,name)] gates into the [name(%q1)].)][hs_spacemsg(1,In the distance a vessel gates into the [name(%q1)].)][setq(0,[hs_set_attr([v(HSDB_OWNER)]/uid,[get(%q1/dest_uid)])])][setq(0,[hs_set_attr([v(HSDB_OWNER)]/x,[get(%q1/dest_x)])])][setq(0,[hs_set_attr([v(HSDB_OWNER)]/y,[get(%q1/dest_y)])])][setq(0,[hs_set_attr([v(HSDB_OWNER)]/z,[get(%q1/dest_z)])])][u(%q1/dest_msg)];@wait 2={th [hs_spacemsg(2,The [hs_get_attr(%!,name)] gates out of the [name(%q1)].)][hs_spacemsg(1,In the distance a vessel gates out of the [name(%q1)].)]}}}}}
&CMD_LAND Master HSpace Console <MHS>=$land */*:Think [SetQ(0,[Extract(%1,2,1,=)])];@swi %q0={},{@nav/land %0/%1},{&deadman [V(HSDB_OWNER)];@nav/land %0/%1=%q0}
&CMD_LAUNCH Master HSpace Console <MHS>=$launch:@switch [u(fn_canuse)]=>0,@pemit %#=[ansi(hr,-)] This ship is currently in lockdown %([ansi(hy,squish(timestring(u(fn_canuse))))]%).,{&deadman [V(HSDB_OWNER)];@nav/undock}
&CMD_LOAD Master HSpace Console <MHS>=$load *:&deadman [V(HSDB_OWNER)];@console/load %0
&CMD_LOCK Master HSpace Console <MHS>=$lock *:@Switch [SetQ(0,[UFun(FN_CONTACT,%0)])]%q0={},@PEmit %#=[Ansi(hr,-)] No such contact on sensors.,{@Switch [UFun(FN_NEWBIESHIP,[Extract(%q0,2,1,:)])]=1,@PEmit %#=[Ansi(hr,-)] That ship is classified as a newbie ship and may not be attacked.,{@Switch [UFun(FN_IS_DEADMAN,[Extract(%q0,2,1,:)])]=1,@PEmit %#=[Ansi(hr,-)] That vessel is in deadman mode and may not be attacked.,{&deadman [V(HSDB_OWNER)];@Console/lock %0;&HSDB_LASTLOCK %!=%0;&HSDB_LASTTARGET %!}}
&CMD_LOCK_AUTO Master HSpace Console <MHS>=$lock:@select [Setr(0,UFun(FN_CONTACT,v(HSDB_LASTLOCK)))]-[v(HSDB_LASTLOCK)]=*-,@pemit %#=[ansi(hr,-)] You have not previously locked upon a target.,-*,@Pemit %#=[Ansi(hr,-)] No such contact on sensors.,{@Switch [UFun(FN_NEWBIESHIP,[Extract(%q0,2,1,:)])]=1,@PEmit %#=[Ansi(hr,-)] That ship is classified as a newbie ship and may not be attacked.,{@Switch [UFun(FN_IS_DEADMAN,[Extract(%q0,2,1,:)])]=1,@PEmit %#=[Ansi(hr,-)] That vessel is in deadman mode and may not be attacked.,{&deadman [V(HSDB_OWNER)];@Console/lock [v(HSDB_LASTLOCK)];@console/target [v(HSDB_LASTTARGET)]}}
&CMD_MAPRANGE Master HSpace Console <MHS>=$maprange *:&DEADMAN [V(HSDB_OWNER)];@nav/maprange %0
&CMD_MAPRANGE_SHORT Master HSpace Console <MHS>=$mr *:&DEADMAN [V(HSDB_OWNER)];@nav/maprange %0
&CMD_NAV_STAT Master HSpace Console <MHS>=$stat:&DEADMAN [V(HSDB_OWNER)];@nav/status
&CMD_NOLOAD Master HSpace Console <MHS>=$autoload off:&DEADMAN [V(HSDB_OWNER)];@console/autoload 0
&CMD_NOROTATE Master HSpace Console <MHS>=$autorotate off:&DEADMAN [V(HSDB_OWNER)];@console/autorotate 0
&CMD_OPEN_BAY Master HSpace Console <MHS>=$open bay *:th if(hs_get_attr(%!,ispowered),if(isdbref(setr(0,extract(hs_get_attr(%!,landinglocs),%0,1))),if(hs_get_attr(%q0,active),pemit(%#,ansi(hr,-) Bay doors not closed.),hs_set_attr(%q0/active,1)[pemit(%#,ansi(hg,-) Bay doors to bay %0 opened.)][remit(%q0,The bay doors slowly open.)]),pemit(%#,ansi(hr,-) Invalid bay.)),pemit(%#,ansi(hr,-) [name(%!)] is currently powered down.))
&CMD_PLOT Master HSpace Console <MHS>=$plot * * *:Think [If(And(IsInt(%0),IsInt(%1),IsInt(%2)),If(HS_Get_Attr(%!,IsPowered),PEmit(%#,[Ansi(hb,.[Repeat(-,77)].%r|)]%bCourse Calculations[Space(28)][RJust(HS_Get_Attr(%!,Name),28)] [Ansi(hb,|%r%b>[Repeat(-,75)]<%r|)] [LJust([Ansi(hg,Source Coordinates - X:)][RJust(Ansi(hw,SetR(0,HS_Get_Attr(%!,X))),14)]%b%b[Ansi(hg,Y:)][RJust(Ansi(hw,SetR(1,HS_Get_Attr(%!,Y))),14)]%b%b[Ansi(hg,Z:)][RJust(Ansi(hw,SetR(2,HS_Get_Attr(%!,Z))),14)],76)][ansi(hb,|%r|)]%b[LJust([Ansi(hg,Target Coordinates - X:)][RJust(Ansi(hw,Round(%0,2)),14)]%b%b[Ansi(hg,Y:)][RJust(Ansi(hw,Round(%1,2)),14)]%b%b[Ansi(hg,Z:)][RJust(Ansi(hw,Round(%2,2)),14)],76)][Ansi(hb,|%r%b>[Repeat(-,37)].[Repeat(-,37)]<%r|)]%b[LJust([Ansi(hg,Heading%b:)]%b[Ansi(hw,XYAng(%q0,%q1,%0,%1))][Ansi(hg,m)][Ansi(hw,ZAng(%q0,%q1,%q2,%0,%1,%2))],37)][Ansi(hb,|)][LJust(%b[Ansi(hg,Fuel Range:)]%b[Ansi(hw,[Switch(HS_Sys_Attr(%!/Fuel,Burnable Fuel,1),#-1 System*,N/A,[Mul(Mul(HS_Sys_Attr(%!/Engines,Efficiency,1),1000),HS_Sys_Attr(%!/Fuel,Burnable Fuel,1))] lt)])],38)][Ansi(hb,|%r|)]%b[LJust([Ansi(hg,Distance:)]%b[Ansi(hw,[Switch(Round(SetR(3,Dist3D(Round(%q0,0),Round(%q1,0),Round(%q2,0),%0,%1,%2)),2),{#-1 ARG*},A very long way away,#$)] [If(Not(StrMatch(%q3,#-1 ARG*)),lt)])],37)][Ansi(hb,|)][LJust(%b[Ansi(hg,ETA%b%b%b%b%b%b%b:)]%b[Ansi(hw,Switch(Round(HS_Sys_Attr(%!/Engines,Current Speed,1),0),0,No movement,[SetQ(4,FDiv(%q3,FDiv(Abs(HS_Sys_Attr(%!/Engines,Current Speed,1)),3600)))][Switch(HS_Sys_Attr(%!/Jump,Engaged,1),1,UFun(%!/FN_FORMAT_ETA,%q4,1),UFun(%!/FN_FORMAT_ETA,%q4,0))]))],38)][Ansi(hb,|%r`[Repeat(-,38)]^[Repeat(-,38)]')]),PEmit(%#,Ansi(hr,-) [Name(%!)] is currently powered down.)),PEmit(%#,Ansi(hr,-) Invalid destination.))]
&CMD_PRIORITY1 Master HSpace Console <MHS>=$syspriority *-:@eng/systempriority %0=-1
&CMD_PRIORITY2 Master HSpace Console <MHS>=$syspriority *+:@eng/systempriority %0=1
&CMD_QREP Master HSpace Console <MHS>=$qrep:&deadman [V(HSDB_OWNER)];@console/qrep
&CMD_QUICK_AFT Master HSpace Console <MHS>=$aft:&deadman [V(HSDB_OWNER)];@eng/setsyspower aft=100\%
&CMD_QUICK_AFT_OFF Master HSpace Console <MHS>=$aft off:&deadman [V(HSDB_OWNER)];@eng/setsyspower aft=0
&CMD_QUICK_COMM Master HSpace Console <MHS>=$comm:&deadman [V(HSDB_OWNER)];@eng/setsyspower comm=100\%
&CMD_QUICK_COMM_OFF Master HSpace Console <MHS>=$comm off:&deadman [V(HSDB_OWNER)];@eng/setsyspower comm=0
&CMD_QUICK_COMPUTER Master HSpace Console <MHS>=$computer:&deadman [V(HSDB_OWNER)];@eng/setsyspower int=100\%
&CMD_QUICK_COMPUTER_OFF Master HSpace Console <MHS>=$computer off:&deadman [V(HSDB_OWNER)];@eng/setsyspower int=0
&CMD_QUICK_ENGINES Master HSpace Console <MHS>=$engines:&deadman [V(HSDB_OWNER)];@eng/setsyspower eng=100\%
&CMD_QUICK_ENGINES_OFF Master HSpace Console <MHS>=$engines off:&deadman [V(HSDB_OWNER)];@eng/setsyspower eng=0
&CMD_QUICK_FORE Master HSpace Console <MHS>=$fore:&deadman [V(HSDB_OWNER)];@eng/setsyspower fore=100\%
&CMD_QUICK_FORE_OFF Master HSpace Console <MHS>=$fore off:&deadman [V(HSDB_OWNER)];@eng/setsyspower fore=0
&CMD_QUICK_LIFE Master HSpace Console <MHS>=$life:&deadman [V(HSDB_OWNER)];@eng/setsyspower life=100\%
&CMD_QUICK_LIFE_OFF Master HSpace Console <MHS>=$life off:&deadman [V(HSDB_OWNER)];@eng/setsyspower life=0
&CMD_QUICK_PORT Master HSpace Console <MHS>=$port:&deadman [V(HSDB_OWNER)];@eng/setsyspower port=100\%
&CMD_QUICK_PORT_OFF Master HSpace Console <MHS>=$port off:&deadman [V(HSDB_OWNER)];@eng/setsyspower port=0
&CMD_QUICK_REACTOR Master HSpace Console <MHS>=$power:&deadman [V(HSDB_OWNER)];@eng/setsyspower reactor=100\%
&CMD_QUICK_REACTOR_OFF Master HSpace Console <MHS>=$power off:&deadman [V(HSDB_OWNER)];@eng/setsyspower reactor=0
&CMD_QUICK_SENSOR Master HSpace Console <MHS>=$sensor:&deadman [V(HSDB_OWNER)];@eng/setsyspower sensor=100\%
&CMD_QUICK_SENSOR_OFF Master HSpace Console <MHS>=$sensor off:&deadman [V(HSDB_OWNER)];@eng/setsyspower sensor=0
&CMD_QUICK_STAR Master HSpace Console <MHS>=$star:&deadman [V(HSDB_OWNER)];@eng/setsyspower star=100\%
&CMD_QUICK_STAR_OFF Master HSpace Console <MHS>=$star off:&deadman [V(HSDB_OWNER)];@eng/setsyspower star=0
&CMD_QUICK_THRUSTERS Master HSpace Console <MHS>=$thrust:&deadman [V(HSDB_OWNER)];@eng/setsyspower man=100\%
&CMD_QUICK_THRUSTERS_OFF Master HSpace Console <MHS>=$thrust off:&deadman [V(HSDB_OWNER)];@eng/setsyspower man=0
&CMD_RDESC Master HSpace Console <MHS>=$rdesc *=*:@pemit %#=[switch([or([lt(%0,1)],[gt(%0,5)])],1,[ansi(hr,-)] Invalid transmission slot (please use 1 - 5).,[set(%!,comm_rdesc%0:%1)][ansi(hg,-)] Receiving channel description set.)]
&CMD_RFRQ Master HSpace Console <MHS>=$rfrq *=*:@pemit %#=[switch([or([lt(%0,1)],[gt(%0,5)])],1,[ansi(hr,-)] Invalid transmission slot (please use 1 - 5).,[switch([or([lt(%1,100)],[gt(%1,999.99)])],1,[ansi(hr,-)] Receiving frequency must be between 100 and 999.99 MHz.,[set(%!,comm_frqs:[replace([v(comm_frqs)],%0,[round(%1,2)])])][ansi(hg,-)] Receiving slot %0 set to %1 MHz.)])]
&CMD_SCAN Master HSpace Console <MHS>=$scan *:&DEADMAN [V(HSDB_OWNER)];@nav/scan %0;&HSDB_LAST_SCAN %!=%0
&CMD_SCAN_AUTO Master HSpace Console <MHS>=$scan:@switch [hasattr(%!,HSDB_LAST_SCAN)]={},@pemit %#=[ansi(hr,-)] No last scan performed;@nav/scan [v(HSDB_LAST_SCAN)]
&CMD_SECURITY_OFF Master HSpace Console <MHS>=$security off:@pemit %#=[switch([u(fn_is_trusted,%#)],0,[ansi(hr,-)] Permission denied.,[switch([hs_get_attr(%!,boarding code)],,[ansi(hr,-)] Security is not currently activated.,[set(%!,old_boardcode:[hs_get_attr(%!,boarding code)])][setq(1,[hs_set_attr(%!/boarding code,)])][ansi(hg,-)] Security deactivated. Boarding code now not required.)])]
&CMD_SECURITY_ON Master HSpace Console <MHS>=$security on:@pemit %#=[switch([u(fn_is_trusted,%#)],0,[ansi(hr,-)] Permission denied.,[switch([v(old_boardcode)],,[switch([hs_get_attr(%!,boarding code)],,[ansi(hr,-)] No boarding code previously defined. Use boarding code command.,[ansi(hr,-)] Security is already enabled.)],[setq(0,[hs_set_attr(%!/boarding code,[v(old_boardcode)])])][setq(0,[wipe(%!/old_boardcode)])][ansi(hg,-)] Security activated. Boarding code now required.)])]
&CMD_SELFDESTRUCT Master HSpace Console <MHS>=$selfdestruct *=*:@Switch %0=>14,@eng/selfdestruct %0=%1,0,@eng/selfdestruct %0=%1,@PEmit %#=[Ansi(hr,-)] Minimum self destruct interval is 15 seconds.
&CMD_SET_CODE Master HSpace Console <MHS>=$set code *=*:th if(hs_get_attr(%!,ispowered),if(isdbref(setr(0,extract(hs_get_attr(%!,landinglocs),%0,1))),switch(%1,,pemit(%#,ansi(hg,-) Bay access code cleared.),pemit(%#,ansi(hg,-) Bay access code set.))[hs_set_attr(%q0/code,%1)],pemit(%#,ansi(hr,-) Invalid bay.)),pemit(%#,ansi(hr,-) [name(%!)] is currently powered down.))
&CMD_SET_PERC Master HSpace Console <MHS>=$sysperc *=*:&deadman [V(HSDB_OWNER)];@eng/setsyspower %0=%1\%
&CMD_SET_POWER Master HSpace Console <MHS>=$syspower *=*:&deadman [V(HSDB_OWNER)];@eng/setsyspower %0=%1
&CMD_SET_SPEED Master HSpace Console <MHS>=$ss *:@swi [get([v(hsdb_owner)]/clinked_by)]={},{@swi [get([v(hsdb_owner)]/clinked_to)]={},{&deadman [v(hsdb_owner)];@nav/setvelocity %0},{&clinked_by [get([v(hsdb_owner)]/clinked_to)];&clinked_to [v(hsdb_owner)];&deadman [v(hsdb_owner)];@nav/setvelocity %0}},@pemit %#=[ansi(hr,-)] Unable to set speed while another ship has a cargo link.
&CMD_SHIPNAME Master HSpace Console <MHS>=$shipname *:th [switch(xget(v(hsdb_owner),ship_owner),%#,[setq(0,[hs_set_attr(%!/name,%0)])][pemit(%#,ansi(hg,-) Ship name set.)],pemit(%#,ansi(hr,-) Reprogramming failed.))]
&CMD_SPECS Master HSpace Console <MHS>=$specs:@pemit %#=[ansi(hb,.[repeat(-,77)].%r|)] Ship Specifications[RJust(HS_Get_Attr(%!,Name),56)] [Ansi(hb,|%r%b>[Repeat(-,75)]<%r|)] [Ansi(hg,Ship Name%b%b%b%b:)] [LJust(HS_Get_Attr(%!,Name),22)][Ansi(hg,Ship Class%b%b%b%b:)] [LJust(HS_Get_Attr(%!,ClassNa%!),22)] [Ansi(hb,|%r|)]%b[Ansi(hg,Vessel Size%b%b:)] [LJust(HS_Get_Attr(%!,Size) c[HS_Unit_Name()],12)][Space(10)][Ansi(hg,Cargo Capacity:)] [LJust(HS_Get_Attr(%!,Cargo Size) tons,10)][Space(13)][Ansi(hb,|%r|)] [Ansi(hg,Hull Strength:)] [LJust([HS_Get_Attr(%!,MaxHull)] pts,10)][Space(12)][Ansi(hg,Dropship[Space(6)]:)] [LJust(Switch(HS_Get_Attr(%!,Can Drop),1,Yes,No),4)][Space(19)][Ansi(hb,|%r%b>[Repeat(-,75)]<%r|)][Center([Ansi(hw,+)][Ansi(hg,- Systems Present -)][Ansi(hw,+)],77)][Ansi(hb,|%r|)]%b%b[Parse(HS_Eng_Sys(%!),[LJust(##,24)][Switch(Eq(FDiv(#@,3),Trunc(SetR(0,FDiv(#@,3)))),1,[Ansi(hb,%b|%r|)]%b,)],\,)][Switch(%q0,*.3*,[Space(51)][Ansi(hb,|%r|%b)],*.6*,[Space(26)][Ansi(hb,|%r|%b)])][Ansi(hb,[Space(76)]|%r|)][Center(You may obtain specs on systems with 'specs <system name>'.,77)][Ansi(hb,|%r`[Repeat(-,77)]')]
&CMD_SPECS_SYS Master HSpace Console <MHS>=$specs *:@PEmit %#=[SetQ(0,0)][Switch(Match(HS_Eng_Sys(%!),%0*,\,),0,[Ansi(hr,-)] That system is not present on this vessel.,[SetQ(0,Extract(HS_Eng_Sys(%!),#$,1,\,))][Ansi(hb,.[Repeat(-,74)].%r|)]%bSystem Specifications[Space(23)][RJust(HS_Get_Attr(%!,Name),28)] [Ansi(hb,|%r%b>[Repeat(-,72)]<%r|)][UFun(FN_SPECS_[Edit(%q0,%b,_)],%q0)]%r[Ansi(hb,`[Repeat(-,74)]')]
&CMD_SPOSE Master HSpace Console <MHS>=$spose *:@pemit %#=[hs_get_attr(%!,name)] %0;Think [hs_spacemsg(2,[hs_get_attr(%!,name)] %0)]
&CMD_SREP Master HSpace Console <MHS>=$srep:&deadman [v(hsdb_owner)];@nav/sensorreport 0
&CMD_STOPBURN Master HSpace Console <MHS>=$noburn:&deadman [V(HSDB_OWNER)];@nav/afterburn 0
&CMD_SVIEW Master HSpace Console <MHS>=$sview *:&deadman [v(hsdb_owner)];@nav/sview %0
&CMD_SYSREP Master HSpace Console <MHS>=$sysrep:@eng/systemreport
&CMD_TARGET Master HSpace Console <MHS>=$target *:&deadman [V(HSDB_OWNER)];@console/target %0;&hsdb_Lasttarget %!=%0
&CMD_TARGET_AUTO Master HSpace Console <MHS>=$target:@switch [hasattr(%!,HSDB_LASTTARGET)]=1,{&deadman [V(HSDB_OWNER)];@console/target [v(HSDB_LASTTARGET)]},@pemit %#=[ansi(hr,-)] There is no last targetted system selected.
&CMD_TAXI Master HSpace Console <MHS>=$taxi *:@nav/taxi %0
&CMD_TDOCK Master HSpace Console <MHS>=$tdock *=*:&deadman [V(HSDB_OWNER)];@nav/tractordock %0=%1
&CMD_TLOCK Master HSpace Console <MHS>=$tlock *:&deadman [V(HSDB_OWNER)];@nav/tractorlock %0
&CMD_TMODE Master HSpace Console <MHS>=$tmode *:@Switch %0=tractor,{&deadman [V(HSDB_OWNER)];@nav/tractormode 0},repulse,{&deadman [V(HSDB_OWNER)];@nav/tractormode 1},hold,{&deadman [V(HSDB_OWNER)];@nav/tractormode 2},{Think PEmit(%#,[Ansi(hr,-)] Invalid mode.)}
&CMD_TRANSMIT Master HSpace Console <MHS>=$tr *:@pemit %#=[setq(1,[after(%0,=)])][switch(%q1,,[switch([v(comm_lastslot)],,[setq(0,-1)][ansi(hr,-)] What channel do you want to say that on?,[setq(0,[v(comm_lastslot)])][setq(1,%0)])],[setq(0,[before(%0,=)])])][switch(%q0,-1,,[switch([u(fn_has_comm)],0,[ansi(hr,-)] This vessel has no communications array.,[switch([hs_sys_attr([v(hsdb_owner)]/com,current power,1)],0,[ansi(hr,-)] Communications are not currently online.,[switch([or([gt(%q0,5)],[lt(%q0,1)])],1,[ansi(hr,-)] Invalid transmission slot (please use 1 - 5).,[switch([hs_comm_msg([hs_get_attr(%!,uid)],[hs_get_attr(%!,uid)],[hs_get_attr(%!,x)],[hs_get_attr(%!,y)],[hs_get_attr(%!,z)],[hs_sys_attr([v(hsdb_owner)]/com,max range,1)],[extract([v(comm_frqs)],%q0,1)],%q1)],Sent.,[Wipe(V(HSDB_OWNER)/DEADMAN)][set(%!,comm_lastslot:%q0)][ansi(c,\[)][extract([v(comm_frqs)],%q0,1)] MHz[ansi(c,\])] transmitted\, "%q1",[ansi(hr,-)] Failed to send message (unknown reason).)])])])])]
&CMD_TRUSTED_ADD Master HSpace Console <MHS>=$trusted/add *:th switch(xget(v(HSDB_OWNER),ship_owner),%#,if(hastype(setr(9,num(*%0)),player),if(t(member(xget(v(HSDB_OWNER),trusted),%q9)),pemit(%#,[ansi(hr,-)] That person is already on the trusted list.),set(v(hsdb_owner),trusted:[setunion(xget(v(hsdb_owner),trusted),%q9)])[pemit(%#,[ansi(hg,-)] [name(%q9)] added to the trusted list.)]),pemit(%#,[ansi(hr,-)] Invalid target.)),pemit(%#,[ansi(hr,-)] Permission denied.))
&CMD_TRUSTED_REMOVE Master HSpace Console <MHS>=$trusted/remove *:th switch(xget(v(HSDB_OWNER),ship_owner),%#,if(hastype(setr(9,num(*%0)),player),if(t(member(xget(v(HSDB_OWNER),trusted),%q9)),set(v(hsdb_owner),trusted:[remove(xget(v(hsdb_owner),trusted),%q9)])[pemit(%#,[ansi(hg,-)] [name(%q9)] removed from the trusted list.)],pemit(%#,[ansi(hr,-)] That person is not on the trusted list.)),pemit(%#,[ansi(hr,-)] Invalid target.)),pemit(%#,[ansi(hr,-)] Permission denied.))
&CMD_UNDOCK Master HSpace Console <MHS>=$undock:@switch [u(fn_canuse)]=>0,@pemit %#=[ansi(hr,-)] This ship is currently in lockdown %([ansi(hy,squish(timestring(u(fn_canuse))))]%).,&deadman [V(HSDB_OWNER)];@nav/undock
&CMD_UNLINK Master HSpace Console <MHS>=$unlink *:&deadman [V(HSDB_OWNER)];@nav/boardunlink %0
&CMD_UNLOAD Master HSpace Console <MHS>=$unload *:&deadman [V(HSDB_OWNER)];@console/unload %0
&CMD_UNLOCK Master HSpace Console <MHS>=$unlock:&deadman [V(HSDB_OWNER)];@console/unlock
&CMD_VIEW_OUTSIDE Master HSpace Console <MHS>=$view:@nav/view
&CMD_VSTATS Master HSpace Console <MHS>=$vstats:@eng/shipstats
@FAILURE Master HSpace Console <MHS>=Don't even try it.
&FN_BURNABLE_LEFT Master HSpace Console <MHS>=[sub([hs_sys_attr(%0/fuel,max burnable fuel,1)],[trunc([hs_sys_attr(%0/fuel,burnable fuel,1)])])]
&FN_CANUSE Master HSpace Console <MHS>=[sub(xget(v(HSDB_OWNER),can_use),secs())]
&FN_CONTACT Master HSpace Console <MHS>=[squish([iter([hs_srep(%!,0)],[switch([extract(##,1,1,:)],%0,##)],|)])]
&FN_CSTAT Master HSpace Console <MHS>=[Ansi(hb,.[Repeat(-,54)].%r|)]%bCommunications Status%b[RJust(HS_Get_Attr(%!,Name),30)] [Ansi(hb,|%r%b>[Repeat(-,52)]<%r|)]%b[Ansi(hg,\[)][Ansi(h,#)][Ansi(hg,\] Frq[Space(5)]Channel Description[Space(22)])][Ansi(hb,|)]%r[SetQ(0,0)][Parse(V(COMM_FRQS),[Ansi(hb,|)] [LJust(\[[SetR(0,Inc(%q0))]\] [Round(##,2)]%b%b[Mid(V(COMM_RDESC{%q0}),0,40)],53)][Ansi(hb,|)]%r, ,)][Ansi(hb,|[Space(54)]|)]%r[Ansi(hb,|)]%b%b%b[Ansi(h,*)] Type 'rfrq <slot>=<#>' to change frqs.[Space(11)][Ansi(hb,|%r|)]%b%b%b[Ansi(h,*)] Type 'rdesc <slot>=<desc>' to set slot desc.%b%b%b%b%b[Ansi(hb,|%r|)]%b%b%b[Ansi(h,*)] Type 'tr <slot>=<msg>' to send a message.[Space(8)][ansi(hb,|%r`[Repeat(-,54)]')]
&FN_FORMAT_ETA Master HSpace Console <MHS>=[Switch(Round(%0,0),#-1*,{Switch(%1,0,{> 23148d 3h 33m 20s},{> [Squish(TimeString(FDiv(2000000000,HS_Jump_Speed_Multiplier())))]})},{Switch(%1,1,Squish(TimeString(Round(FDiv(%0,HS_Jump_Speed_Multiplier()),0))),0,Squish(TimeString(Round(%0,0))))})]
&FN_HAS_COMM Master HSpace Console <MHS>=[gt([match([hs_eng_sys([v(hsdb_owner)])],comm. array,\,)],0)]
&FN_IS_DEADMAN Master HSpace Console <MHS>=[switch([get(%0/deadman)],YES,1,0)]
&FN_LATTR Master HSpace Console <MHS>=iter(lattr(%!/cmd*),if(hasattrval(%!,##),##))
&FN_LOCKDOWN Master HSpace Console <MHS>=[switch(xget(v(hsdb_owner),can_use),>[secs()],[set(v(hsdb_owner),CAN_USE:[add(#$,%0)])],[set(v(hsdb_owner),CAN_USE:[add(secs(),%0)])])]
&FN_NEWBIESHIP Master HSpace Console <MHS>=0
&FN_NOTIFY_CONSOLES Master HSpace Console <MHS>=[PEmit([Parse([HS_GET_ATTR(%0,Consoles)],[Switch([Loc([Lock(##/USE)])],[Loc(##)],[Lock(##/USE)])])],%1)]
&FN_REACTABLE_LEFT Master HSpace Console <MHS>=[sub([trunc([hs_sys_attr(%0/fuel,max reactable fuel,1)])],[trunc([hs_sys_attr(%0/fuel,reactable fuel,1)])])]
&FN_SPECS_AFT_SHIELD Master HSpace Console <MHS>=[UFun(FN_SPECS_SHIELD,%0)]
&FN_SPECS_CLOAKING_DEVICE Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Cloaking Device -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Cloak,Tolerance,0),25)]%b[Ansi(hg,Efficiency:)] [LJust([Round(HS_Sys_Attr(%q6/Cloak,Efficiency,0),2)]\%,16)]%b[Ansi(hb,|%r|)]%b[Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Cloak,Optimal Power,0)] MW,55)][Ansi(hb,|)]
&FN_SPECS_COMM._ARRAY Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Communications Array -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Comm,Tolerance,0),23)]%b[Ansi(hg,Maximum Range:)] [LJust([HS_Sys_Attr(%q6/Comm,Max Range,0)] [HS_Unit_Name()],15)]%b[Ansi(hb,|%r|)]%b[Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Comm,Optimal Power,0)] MW,55)][Ansi(hb,|)]
&FN_SPECS_ENGINES Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- %0 -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Eng,Tolerance,0),14)]%b[Ansi(hg,Maximum Velocity%b:)] [LJust([HS_Sys_Attr(%q6/Eng,Max Velocity,0)] [HS_Unit_Name()]/h,20)]%b[Ansi(hb,|%r|)]%b[Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Eng,Optimal Power,0)] MW,14)]%b[Ansi(hg,Acceleration Rate:)] [LJust([HS_Sys_Attr(%q6/Eng,Acceleration,0)] [HS_Unit_Name()]/h/sec,20)]%b[Ansi(hb,|%r|)][Space(34)][Ansi(hg,Afterburners%b%b%b%b%b:)] [LJust(Switch(HS_Sys_Attr(%q6/Eng,Can Afterburn,0),1,Yes,No),20)]%b[Ansi(hb,|)][Switch(Match(HS_Eng_Sys(%q6),Fuel*,\,),0,{},%r[Ansi(hb,|)][Space(34)][Ansi(hg,Efficiency%b%b%b%b%b%b%b:)] [LJust([Mul(HS_Sys_Attr(%q6/Eng,Efficiency,0),1000)] [HS_Unit_Name()]/fuel unit,20)]%b[Ansi(hb,|)])]
&FN_SPECS_FORE_SHIELD Master HSpace Console <MHS>=[UFun(FN_SPECS_SHIELD,%0)]
&FN_SPECS_FUEL_SYSTEM Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Fuel Supply System -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(N/A,16)]%b[Ansi(hg,Maximum Reactor Fuel:)] [LJust([HS_Sys_Attr(%q6/Fuel,Max Reactable Fuel,0)] units,16)][Ansi(hb,|%r|)] [Ansi(hg,Optimal Power%b%b%b:)] [LJust(N/A,16)]%b[Ansi(hg,Maximum Engine Fuel%b:)] [LJust([HS_Sys_Attr(%q6/Fuel,Max Burnable Fuel,0)] units,16)][Ansi(hb,|)]
&FN_SPECS_INTERNAL_COMPUTER Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Internal Computer -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Int,Tolerance,0),25)]%b[Ansi(hg,# Consoles To Power:)] [LJust(Words(HS_Get_Attr(%!,Consoles)),7)]%b[Ansi(hb,|%r|)] [Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Int,Optimal Power,0)] MW \(for all consoles\),55)][Ansi(hb,|)]
&FN_SPECS_JUMP_DRIVE Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- %0 -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Jump,Tolerance,0),18)]%b[Switch(Match(HS_Eng_Sys(%q6),Fuel*,\,),0,[Space(36)],[Ansi(hg,Efficiency:)] [LJust([Mul(HS_Sys_Attr(%q6/Jump,Efficiency,0),1000)] [HS_Unit_Name()]/fuel unit ,23)]%b)][Ansi(hb,|%r|)] [Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Jump,Optimal Power,0)] MW,55)][Ansi(hb,|)]
&FN_SPECS_LIFE_SUPPORT Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Life Support System -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Jump,Tolerance,0),23)]%b[Ansi(hg,Optimal Power:)] [LJust([HS_Sys_Attr(%q6/Life,Optimal Power,0)] MW,15)]%b[Ansi(hb,|)]
&FN_SPECS_MANEUV._THRUSTERS Master HSpace Console <MHS>=[setq(6,[v(hsdb_owner)])][SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Maneuvering Thrusters -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Man,Tolerance,0),23)]%b[Ansi(hg,Turning Rate:)] [LJust([HS_Sys_Attr(%q6/Man,Turning Rate,0)] deg/sec,16)]%b[Ansi(hb,|%r|)] [Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Man,Optimal Power,0)] MW,54)]%b[Ansi(hb,|)]
&FN_SPECS_PORT_SHIELD Master HSpace Console <MHS>=[UFun(FN_SPECS_SHIELD,%0)]
&FN_SPECS_REACTOR Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Internal Reactor -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Reac,Tolerance,0),24)]%b[Ansi(hg,Maximum Output:)] [LJust([HS_Sys_attr(%q6/Reac,Max Output,0)] MW,13)]%b[Ansi(hb,|)]
&FN_SPECS_SENSOR_ARRAY Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- Sensor Array -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Sens,Tolerance,0),25)]%b[Ansi(hg,Sensor Rating:)] [LJust(HS_Sys_Attr(%q6/Sens,Sensor Rating,0),13)]%b[Ansi(hb,|%r|)] [Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Sens,Optimal Power,0)] MW,54)]%b[Ansi(hb,|)]
&FN_SPECS_SHIELD Master HSpace Console <MHS>=[SetQ(6,[V(HSDB_OWNER)])][Center([Ansi(hw,+)][Ansi(hg,- %0 -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/%0,Tolerance,0),17)]%b[Ansi(hg,Shield Type%b%b%b%b%b%b:)] [LJust(Switch(SetR(7,HS_Sys_Attr(%q6/%0,Shield Type,0)),0,Deflector,1,Absorption,Unknown),17)]%b[Ansi(hb,|%r|)] [Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/%0,Optimal Power,0)] MW,17)]%b[Ansi(hg,Maximum Strength :)] [LJust([Trunc(HS_Sys_Attr(%q6/%0,Max Strength,0))] pts,17)]%b[Ansi(hb,|)][Switch(%q7,1,[Ansi(hb,%r|)][Space(37)][Ansi(hg,Regeneration Rate:)] [LJust([HS_Sys_Attr(%q6/%0,Regen Rate,0)] pts/sec,17)]%b[Ansi(hb,|)])]
&FN_SPECS_STARBOARD_SHIELD Master HSpace Console <MHS>=[UFun(FN_SPECS_SHIELD,%0)]
&FN_SPECS_TRACTOR_BEAM Master HSpace Console <MHS>=[SetQ(6,V(HSDB_OWNER))][Center([Ansi(hw,+)][Ansi(hg,- %0 -)][Ansi(hw,+)],74)][Ansi(hb,|%r|[Space(74)]|%r|)] [Ansi(hg,Stress Tolerance:)] [LJust(HS_Sys_Attr(%q6/Trac,Tolerance,0),27)]%b[Ansi(hg,Strength:)] [LJust([Round(HS_Sys_Attr(%q6/Trac,Strength,0),0)] pts,16)]%b[Ansi(hb,|%r|)]%b[Ansi(hg,Optimal Power%b%b%b:)] [LJust([HS_Sys_Attr(%q6/Trac,Optimal Power,0)] MW,55)][Ansi(hb,|)]
&FUEL_TYPES Master HSpace Console <MHS>=burnable
