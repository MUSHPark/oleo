#!/bin/bash
curr_branch=$(git branch | grep '*' | cut -d" " -f2)
if [[ "${curr_branch}" == "master" ]]; then
    git fetch
    ISBEHIND=$(git status -sb | grep -qi behind && echo "1" || echo "0")
        if [[ "${ISBEHIND}" -eq "1" ]];then
        echo " "
        echo "ERROR: The remote master branch is more up to date!" >&2
        echo "       New refs have been fetched. Please run 'git merge' before running" >&2
        echo "       'git push' again." >&2
        exit 1
    fi
    version_regex='^([0-9]+)\.([0-9]+)(\+.+)*$'
    current_tag=$(git describe --tags --abbrev=0 --candidates=1)
    current_tag=$(echo ${current_tag} | tr -d 'v')
    if [[ ${current_tag} =~ ${version_regex} ]]; then
        current_major="${BASH_REMATCH[1]}"
        current_minor="${BASH_REMATCH[2]}"
        current_patch=$(git grep PATCH_VERSION $(git ls-remote . 'refs/remotes/*/HEAD' |cut -f 1) |grep 'patchlevel.h' | awk '{print $3}' |tr -d \")
    else
        echo " "
        echo "ERROR: 'git describe --tags --candidates=1' did not output a valid version" >&2
        echo "        string for the current repo. Unable to use patchlevel.template." >&2
        echo "        This requires manual fixing of the repository." >&2
        exit 1
    fi
    pfile_major=$(grep "#define MAJOR_VERSION " $(pwd)/Server/hdrs/patchlevel.h | awk '{print $3}' |tr -d '"')
    pfile_minor=$(grep "#define MINOR_VERSION " $(pwd)/Server/hdrs/patchlevel.h | awk '{print $3}' |tr -d '"')
    pfile_patch=$(grep "#define PATCH_VERSION " $(pwd)/Server/hdrs/patchlevel.h | awk '{print $3}' |tr -d '"')
    pfile_ext=$(grep "#define VERSION_EXT " $(pwd)/Server/hdrs/patchlevel.h | awk '{print $3}' |tr -d '"')
    is_larger=0
    major_changed=0
    minor_changed=0
    patch_changed=0
    for i in major minor patch
    do
        tempvar=pfile_${i}
        tempvar2=current_${i}
        if [[ "${!tempvar}" -lt "${!tempvar2}" ]];then
            if [[ "$(( $major_changed + $minor_changed + $patch_changed ))" -eq "0" ]];then
                echo "ERROR: The new version number can not be lower than the current one!" >&2
                exit 1
            fi
        elif [[ "${!tempvar}" -gt "${!tempvar2}" ]];then
           eval ${i}_changed=1
        fi
    done
    if [[ "$(( ${major_changed} + ${minor_changed} + ${patch_changed} ))" -eq "0" ]];then
        echo "ERROR: The new version number must be different from the old one!" >&2
        exit 1
    fi
    
    echo "OLD ${current_tag}" > $(pwd)/tag.tmp
    if [ -z "${pfile_ext}" ];then
        echo "NEW ${pfile_major}.${pfile_minor}.${pfile_patch}" >> $(pwd)/tag.tmp
    else
        echo "NEW ${pfile_major}.${pfile_minor}.${pfile_patch}-${pfile_ext}" >> $(pwd)/tag.tmp
    fi
    if [[ "$(( ${major_changed} + ${minor_changed} ))" -eq "0" ]];then
            echo "PATCHONLY" >> $(pwd)/tag.tmp
    fi
    
    if [[ -s $(pwd)/tag.tmp ]];then
        HASOLD=$(grep -qP "^OLD \d+\.\d+(\+.+)*$" $(pwd)/tag.tmp && echo "1" || echo "0")
        HASNEW=$(grep -qP "^NEW \d+\.\d+(\+.+)*$" $(pwd)/tag.tmp && echo "1" || echo "0")
        if [[ "$(( ${HASOLD} + ${HASNEW} ))" -eq "0" ]];then
            echo " "
            echo "ERROR: Malformed tag.tmp file!" >&2
            [[ "${HASOLD}" -eq "0" ]] && echo "       OLD version missing!" >&2
            [[ "${HASNEW}" -eq "0" ]] && echo "       NEW version missing!" >&2
            exit 1
        else
            PSTATE=$(grep -q "PATCHONLY" $(pwd)/tag.tmp && echo "1" || echo "0")
            if [[ "${PSTATE}" -eq "1" ]];then
                OLDTAG=$(grep -P "^OLD \d+\.\d+(\+.+)*$" $(pwd)/tag.tmp | cut -d" " -f2 | awk -F. '{print $1"."$2}')
                git tag -d ${OLDTAG}
                git push --delete origin ${OLDTAG}
                git tag -a ${OLDTAG}
            else
                NEWTAG=$(grep -P "^NEW \d+\.\d+(\+.+)*$" $(pwd)/tag.tmp | cut -d" " -f2 | awk -F. '{print $1"."$2}')
                git tag -a ${NEWTAG}
            fi
            rm $(pwd)/tag.tmp
        fi
    else
        echo " "
        echo "ERROR: No tag.tmp file found!" >&2
        echo "       Something went wrong with the automatic versioning!" >&2
        echo "       To try and fix this, do:" >&2
        echo "       *  git reset HEAD~" >&2
        echo "       *  git checkout Server/hdrs/patchlevel.h" >&2
        echo "       Then try to git commit and push again." >&2
        exit 1
    fi
fi
